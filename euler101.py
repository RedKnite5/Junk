# euler101.py

from fractions import Fraction
import numpy as np

def func(n):
	x = 1 - n + n*n - n*n*n + n**4 - n**5
	x += n**6 - n**7 + n**8 - n**9 + n**10
	return(x)

def test(n):
	return(n*n*n)


def find_poly(seq):
	'''Find the lowest order polynomial that fits all the points passed to it.'''
	
	inputs, outputs = [], []
	for i, o in seq:
		inputs.append(i)
		outputs.append(o)
	
	a = []
	temp = []
	for i in inputs:
		for h in range(len(outputs)):
			temp.append(i**h)
		a.append(temp)
		temp = []
	
	a = np.matrix(a)
	b = np.matrix(outputs).reshape(len(outputs), 1)
	
	c = a.I.dot(b)
	return(c.reshape(1, len(outputs)))

def polynomial_factory(*coefficients):
	"""Return a polynomial with coefficients passed to it."""
	
	def polynomial(x):
		res = 0
		for index, coeff in enumerate(coefficients):
			res += coeff*x**index
		return(res)
	return(polynomial)


def find_fit(l):
	'''Find the first incorrect term generated by the polynomials.'''
	
	poly = polynomial_factory(*l)
	return(poly(len(l)+1))

def sum_fits(seq):
	'''Find the sum of the FITs of the BOPs.'''
	
	x = 0
	for i in range(1, len(seq)+1):
		x += find_fit(find_poly(seq[:i]).tolist()[0])
	return(x)
	

seq = list(map(func, list(range(1, 11))))
seq = list(zip(list(range(1, 11)), seq))



print(round(sum_fits(seq)))







